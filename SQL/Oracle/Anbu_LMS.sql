/***************************************************************************************
                        EMPLOYEE LEAVE MANAGEMENT
****************************************************************************************
    Squad: eLeave
    Member(s): Anbu
    NF LEVEL: BCNF
    Version: 1.0    (MAJOR Rel version . Minor Rel Version . Build Number . )
****************************************************************************************/
DROP SEQUENCE LEAVE_REQ_SEQ; 
DROP SEQUENCE EMP_SEQ;
DROP TABLE LEAVE_REQUEST;
DROP TABLE EMPLOYEE;
DROP VIEW EMPLOYEE_LEAVE_HISTORY_VIEW;
DROP INDEX LEAVE_REQUEST_STATUS_IDX; 
--Sequence

CREATE SEQUENCE EMP_SEQ START WITH 100 ;

-- Employe details developed by anbu
CREATE TABLE EMPLOYEE(
    id NUMBER,
    name VARCHAR2(50) NOT NULL,
    age NUMBER NOT NULL,
    gender CHAR(1) NOT NULL ,
    phone VARCHAR2(15) NOT NULL,
    email VARCHAR2(50) UNIQUE CHECK (REGEXP_LIKE(EMAIL, '^[A-Za-z._%+-]+@[A-Za-z.-]+\.[A-Z|a-z]{2,}$')),
    dept VARCHAR2(50) NOT NULL,
    mgrid NUMBER DEFAULT NULL,
    salary NUMBER
);
 
-- Constraints on Employee details
ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_PK PRIMARY KEY(ID);
ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_UQ_PHONE UNIQUE(PHONE);
ALTER TABLE EMPLOYEE ADD CONSTRAINT EMPLOYEE_CK_GENDER CHECK (GENDER in ('M','F','O'));
 
-- Employee data
INSERT INTO EMPLOYEE (NAME,ID,AGE,GENDER,PHONE,EMAIL,DEPT, SALARY) VALUES('Anbu', EMP_SEQ.NEXTVAL , 25, 'M', '1234567890', 'anbu@lms.com', 'COE', 100);
INSERT INTO EMPLOYEE VALUES(EMP_SEQ.NEXTVAL, 'Raj', 30, 'M', '1234567891', 'raj@lms.com', 'COE', 100,200);
INSERT INTO EMPLOYEE VALUES(EMP_SEQ.NEXTVAL, 'David Josheph Xavier Beckham', 30, 'M', '1234567892', 'db@lms.com', 'COE', 100,300);
COMMIT;
 
-- SEQ for Leave request id

CREATE SEQUENCE LEAVE_REQ_SEQ START WITH 10000;

-- Leave_Request table (id, leave type, from leave date, to leave date, status, reason, employee_id, , Approver_ID)
CREATE TABLE LEAVE_REQUEST(
    id NUMBER,
    leave_type VARCHAR2(50) NOT NULL,
    from_leave_date DATE NOT NULL,
    to_leave_date DATE NOT NULL,
    status VARCHAR2(50) DEFAULT 'PENDING',
    reason VARCHAR2(100) NOT NULL,
    employee_id NUMBER NOT NULL,
    approver_id NUMBER DEFAULT NULL
);

-- Constraints on Leave_Request table
ALTER TABLE LEAVE_REQUEST ADD CONSTRAINT LEAVE_REQUEST_PK PRIMARY KEY(ID);
ALTER TABLE LEAVE_REQUEST ADD CONSTRAINT LEAVE_REQUEST_FK_EMPLOYEE FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(ID);
ALTER TABLE LEAVE_REQUEST ADD CONSTRAINT LEAVE_REQUEST_FK_APPROVER FOREIGN KEY(APPROVER_ID) REFERENCES EMPLOYEE(ID);
ALTER TABLE LEAVE_REQUEST ADD CONSTRAINT LEAVE_REQUEST_CK_STATUS CHECK (STATUS in ('PENDING','APPROVED','REJECTED'));
ALTER TABLE LEAVE_REQUEST ADD CONSTRAINT LEAVE_REQUEST_CK_LEAVE_DATES CHECK (FROM_LEAVE_DATE <= TO_LEAVE_DATE);

-- Data for Leave Request table
INSERT INTO LEAVE_REQUEST VALUES(LEAVE_REQ_SEQ.NEXTVAL, 'SICK', TO_DATE('2021-01-01', 'YYYY-MM-DD'), TO_DATE('2021-01-02', 'YYYY-MM-DD'), 'PENDING', 'Sick Leave', 100, NULL);
INSERT INTO LEAVE_REQUEST VALUES(LEAVE_REQ_SEQ.NEXTVAL, 'CASUAL', TO_DATE('2021-01-01', 'YYYY-MM-DD'), TO_DATE('2021-01-03', 'YYYY-MM-DD'), 'APPROVED', 'Casual Leave', 101, 100);

INSERT INTO LEAVE_REQUEST VALUES(LEAVE_REQ_SEQ.NEXTVAL, 'CASUAL', TO_DATE('2021-01-01', 'YYYY-MM-DD'), TO_DATE('2021-01-10', 'YYYY-MM-DD'), 'APPROVED', 'Casual Leave', 102, 100);
COMMIT; 

-- View 
CREATE OR REPLACE VIEW EMPLOYEE_LEAVE_HISTORY_VIEW AS
SELECT 
    E.ID, NAME, LEAVE_TYPE, FROM_LEAVE_DATE, TO_LEAVE_DATE, (TO_LEAVE_DATE - FROM_LEAVE_DATE) + 1 NO_OF_LEAVES, STATUS, REASON
FROM 
    EMPLOYEE E 
LEFT JOIN 
    LEAVE_REQUEST LR 
ON E.ID = LR.EMPLOYEE_ID;

--SELECT * FROM EMPLOYEE_LEAVE_HISTORY_VIEW;


-- INDEX  
CREATE INDEX LEAVE_REQUEST_STATUS_IDX ON LEAVE_REQUEST(STATUS);

-- PROCEDURE TO UPDATE LEAVE STATUS TO APPROVED IF NO OF DAYS less than 5 days and REJECTED IF NO OF DAYS greater than 5 days
CREATE OR REPLACE PROCEDURE AUTO_UPDATE_LEAVE_STATUS AS
    NO_AUTO_ACTION EXCEPTION;
    PRAGMA EXCEPTION_INIT(NO_AUTO_ACTION, -20000);
    CURSOR LEAVE_CUR IS SELECT * FROM EMPLOYEE_LEAVE_HISTORY_VIEW WHERE STATUS = 'PENDING';
    lr_data EMPLOYEE_LEAVE_HISTORY_VIEW%ROWTYPE;
BEGIN
    OPEN LEAVE_CUR;
    LOOP
        FETCH LEAVE_CUR INTO lr_data;
        EXIT WHEN LEAVE_CUR%NOTFOUND;
        IF lr_data.NO_OF_LEAVES <= 5 THEN
            UPDATE LEAVE_REQUEST SET STATUS = 'APPROVED', REASON = 'AUTO APPROVED BY SYSTEM' WHERE ID = lr_data.ID;
        ELSE
            UPDATE LEAVE_REQUEST SET STATUS = 'REJECTED', REASON = 'AUTO REJECTED BY SYSTEM'  WHERE ID = lr_data.ID;
        END IF;
    END LOOP;
    IF (LEAVE_CUR%ROWCOUNT = 0) THEN 
        RAISE NO_AUTO_ACTION;
    END IF;

EXCEPTION
    WHEN NO_AUTO_ACTION THEN
        DBMS_OUTPUT.PUT_LINE('No action to be taken all the leaves are approved and within SLA' );
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END AUTO_UPDATE_LEAVE_STATUS;
/

--SELECT * FROM EMPLOYEE_LEAVE_HISTORY_VIEW;
--EXECUTE AUTO_UPDATE_LEAVE_STATUS;
--SELECT * FROM EMPLOYEE_LEAVE_HISTORY_VIEW;

